// Caminho Minimo

    g = OrientedGraph(6)

    g.add_vertex_data(0, 'v1')
    g.add_vertex_data(1, 'v2')
    g.add_vertex_data(2, 'v3')
    g.add_vertex_data(3, 'v4')
    g.add_vertex_data(4, 'v5')
    g.add_vertex_data(5, 'v6')

    g.add_edge(0, 1, 3)
    g.add_edge(0, 2, 5)
    g.add_edge(1, 3, 7)
    g.add_edge(1, 4, 1)
    g.add_edge(2, 3, 6)
    g.add_edge(2, 4, 2)
    g.add_edge(3, 5, 1)
    g.add_edge(4, 5, 5)


-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    g = OrientedGraph(15)

    # Adicionando dados aos vértices
    g.add_vertex_data(0, 'v1')
    g.add_vertex_data(1, 'v2')
    g.add_vertex_data(2, 'v3')
    g.add_vertex_data(3, 'v4')
    g.add_vertex_data(4, 'v5')
    g.add_vertex_data(5, 'v6')
    g.add_vertex_data(6, 'v7')
    g.add_vertex_data(7, 'v8')
    g.add_vertex_data(8, 'v9')
    g.add_vertex_data(9, 'v10')
    g.add_vertex_data(10, 'v11')
    g.add_vertex_data(11, 'v12')
    g.add_vertex_data(12, 'v13')
    g.add_vertex_data(13, 'v14')
    g.add_vertex_data(14, 'v15')

    # Adicionando arestas com pesos
    g.add_edge(0, 1, 11)
    g.add_edge(0, 2, 9)
    g.add_edge(0, 3, 15)
    g.add_edge(1, 4, 7)
    g.add_edge(1, 5, 8)
    g.add_edge(1, 6, 5)
    g.add_edge(2, 7, 12)
    g.add_edge(2, 8, 3)
    g.add_edge(2, 9, 4)
    g.add_edge(3, 10, 6)
    g.add_edge(3, 11, 9)
    g.add_edge(4, 12, 10)
    g.add_edge(4, 13, 11)
    g.add_edge(5, 14, 7)
    g.add_edge(6, 10, 8)
    g.add_edge(6, 11, 5)
    g.add_edge(7, 12, 6)
    g.add_edge(7, 13, 3)
    g.add_edge(8, 14, 9)
    g.add_edge(9, 10, 4)
    g.add_edge(9, 11, 8)
    g.add_edge(10, 12, 7)
    g.add_edge(10, 13, 10)
    g.add_edge(11, 14, 5)
    g.add_edge(12, 0, 8)
    g.add_edge(12, 1, 6)
    g.add_edge(13, 2, 9)
    g.add_edge(13, 3, 7)
    g.add_edge(14, 4, 5)
    g.add_edge(14, 5, 11)

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    g = OrientedGraph(20)

    # Adicionando dados aos vértices
    g.add_vertex_data(0, 'v1')
    g.add_vertex_data(1, 'v2')
    g.add_vertex_data(2, 'v3')
    g.add_vertex_data(3, 'v4')
    g.add_vertex_data(4, 'v5')
    g.add_vertex_data(5, 'v6')
    g.add_vertex_data(6, 'v7')
    g.add_vertex_data(7, 'v8')
    g.add_vertex_data(8, 'v9')
    g.add_vertex_data(9, 'v10')
    g.add_vertex_data(10, 'v11')
    g.add_vertex_data(11, 'v12')
    g.add_vertex_data(12, 'v13')
    g.add_vertex_data(13, 'v14')
    g.add_vertex_data(14, 'v15')
    g.add_vertex_data(15, 'v16')
    g.add_vertex_data(16, 'v17')
    g.add_vertex_data(17, 'v18')
    g.add_vertex_data(18, 'v19')
    g.add_vertex_data(19, 'v20')

    # Adicionando arestas com pesos
    g.add_edge(0, 1, 5)
    g.add_edge(0, 2, 3)
    g.add_edge(0, 3, 2)
    g.add_edge(0, 4, 7)
    g.add_edge(1, 5, 4)
    g.add_edge(1, 6, 3)
    g.add_edge(1, 7, 8)
    g.add_edge(2, 8, 7)
    g.add_edge(2, 9, 5)
    g.add_edge(2, 10, 2)
    g.add_edge(3, 11, 6)
    g.add_edge(3, 12, 4)
    g.add_edge(3, 13, 3)
    g.add_edge(4, 14, 8)
    g.add_edge(4, 15, 7)
    g.add_edge(4, 16, 9)
    g.add_edge(5, 17, 2)
    g.add_edge(5, 18, 5)
    g.add_edge(5, 19, 3)
    g.add_edge(6, 10, 9)
    g.add_edge(6, 11, 4)
    g.add_edge(6, 12, 2)
    g.add_edge(7, 13, 7)
    g.add_edge(7, 14, 5)
    g.add_edge(7, 15, 6)
    g.add_edge(8, 16, 4)
    g.add_edge(8, 17, 3)
    g.add_edge(8, 18, 8)
    g.add_edge(9, 19, 6)
    g.add_edge(9, 0, 5)
    g.add_edge(10, 1, 7)
    g.add_edge(10, 2, 4)
    g.add_edge(10, 3, 2)
    g.add_edge(11, 4, 6)
    g.add_edge(11, 5, 3)
    g.add_edge(11, 6, 8)
    g.add_edge(12, 7, 7)
    g.add_edge(12, 8, 5)
    g.add_edge(12, 9, 2)
    g.add_edge(13, 10, 6)
    g.add_edge(13, 11, 4)
    g.add_edge(13, 12, 3)
    g.add_edge(14, 13, 8)
    g.add_edge(14, 14, 7)
    g.add_edge(14, 15, 9)
    g.add_edge(15, 16, 2)
    g.add_edge(15, 17, 5)
    g.add_edge(15, 18, 3)
    g.add_edge(16, 19, 9)
    g.add_edge(16, 0, 5)
    g.add_edge(17, 1, 7)
    g.add_edge(17, 2, 4)
    g.add_edge(17, 3, 2)
    g.add_edge(18, 4, 6)
    g.add_edge(18, 5, 3)
    g.add_edge(18, 6, 8)
    g.add_edge(19, 7, 7)
    g.add_edge(19, 8, 5)
    g.add_edge(19, 9, 2)


-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    g = OrientedGraph(50)

    # Adicionando dados aos vértices
    for i in range(50):
        g.add_vertex_data(i, f'v{i+1}')

    # Adicionando arestas com pesos
    edges = [
        (0, 1, 5), (0, 2, 3), (0, 3, 2), (0, 4, 7), (0, 5, 1),
        (1, 6, 4), (1, 7, 3), (1, 8, 8), (1, 9, 2), (1, 10, 5),
        (2, 11, 7), (2, 12, 5), (2, 13, 2), (2, 14, 4), (2, 15, 6),
        (3, 16, 6), (3, 17, 4), (3, 18, 3), (3, 19, 7), (3, 20, 5),
        (4, 21, 8), (4, 22, 7), (4, 23, 9), (4, 24, 6), (4, 25, 4),
        (5, 26, 2), (5, 27, 5), (5, 28, 3), (5, 29, 9), (5, 30, 6),
        (6, 31, 9), (6, 32, 4), (6, 33, 2), (6, 34, 7), (6, 35, 5),
        (7, 36, 7), (7, 37, 5), (7, 38, 6), (7, 39, 8), (7, 40, 4),
        (8, 41, 4), (8, 42, 3), (8, 43, 8), (8, 44, 6), (8, 45, 2),
        (9, 46, 6), (9, 47, 5), (9, 48, 4), (9, 49, 3), (9, 0, 8),
        (10, 11, 7), (10, 12, 5), (10, 13, 4), (10, 14, 2), (10, 15, 3),
        (11, 16, 6), (11, 17, 3), (11, 18, 8), (11, 19, 2), (11, 20, 5),
        (12, 21, 7), (12, 22, 5), (12, 23, 2), (12, 24, 4), (12, 25, 3),
        (13, 26, 8), (13, 27, 6), (13, 28, 4), (13, 29, 2), (13, 30, 7),
        (14, 31, 9), (14, 32, 4), (14, 33, 3), (14, 34, 7), (14, 35, 5),
        (15, 36, 7), (15, 37, 6), (15, 38, 5), (15, 39, 4), (15, 40, 8),
        (16, 41, 6), (16, 42, 5), (16, 43, 4), (16, 44, 3), (16, 45, 2),
        (17, 46, 8), (17, 47, 7), (17, 48, 5), (17, 49, 3), (17, 0, 9),
        (18, 1, 5), (18, 2, 7), (18, 3, 4), (18, 4, 3), (18, 5, 2),
        (19, 6, 6), (19, 7, 5), (19, 8, 4), (19, 9, 3), (19, 10, 7),
        (20, 11, 8), (20, 12, 5), (20, 13, 4), (20, 14, 3), (20, 15, 2),
        (21, 16, 7), (21, 17, 5), (21, 18, 6), (21, 19, 8), (21, 20, 4),
        (22, 21, 6), (22, 22, 5), (22, 23, 4), (22, 24, 3), (22, 25, 8),
        (23, 26, 7), (23, 27, 5), (23, 28, 4), (23, 29, 2), (23, 30, 6),
        (24, 31, 5), (24, 32, 3), (24, 33, 7), (24, 34, 5), (24, 35, 8),
        (25, 36, 9), (25, 37, 4), (25, 38, 2), (25, 39, 7), (25, 40, 6),
        (26, 41, 8), (26, 42, 5), (26, 43, 4), (26, 44, 3), (26, 45, 2),
        (27, 46, 9), (27, 47, 7), (27, 48, 5), (27, 49, 3), (27, 0, 6),
        (28, 1, 4), (28, 2, 7), (28, 3, 5), (28, 4, 3), (28, 5, 2),
        (29, 6, 6), (29, 7, 5), (29, 8, 4), (29, 9, 3), (29, 10, 7),
        (30, 11, 8), (30, 12, 5), (30, 13, 4), (30, 14, 3), (30, 15, 2),
        (31, 16, 7), (31, 17, 5), (31, 18, 6), (31, 19, 8), (31, 20, 4),
        (32, 21, 6), (32, 22, 5), (32, 23, 4), (32, 24, 3), (32, 25, 8),
        (33, 26, 7), (33, 27, 5), (33, 28, 4), (33, 29, 2), (33, 30, 6),
        (34, 31, 5), (34, 32, 3), (34, 33, 7), (34, 34, 5), (34, 35, 8),
        (35, 36, 9), (35, 37, 4), (35, 38, 2), (35, 39, 7), (35, 40, 6),
        (36, 41, 8), (36, 42, 5), (36, 43, 4), (36, 44, 3), (36, 45, 2),
        (37, 46, 9), (37, 47, 7), (37, 48, 5), (37, 49, 3), (37, 0, 6),
        (38, 1, 4), (38, 2, 7), (38, 3, 5), (38, 4, 3), (38, 5, 2),
        (39, 6, 6), (39, 7, 5), (39, 8, 4), (39, 9, 3), (39, 10, 7),
        (40, 11, 8), (40, 12, 5), (40, 13, 4), (40, 14, 3), (40, 15, 2),
        (41, 16, 7), (41, 17, 5), (41, 18, 6), (41, 19, 8), (41, 20, 4),
        (42, 21, 6), (42, 22, 5), (42, 23, 4), (42, 24, 3), (42, 25, 8),
        (43, 26, 7), (43, 27, 5), (43, 28, 4), (43, 29, 2), (43, 30, 6),
        (44, 31, 5), (44, 32, 3), (44, 33, 7), (44, 34, 5), (44, 35, 8),
        (45, 36, 9), (45, 37, 4), (45, 38, 2), (45, 39, 7), (45, 40, 6),
        (46, 41, 8), (46, 42, 5), (46, 43, 4), (46, 44, 3), (46, 45, 2),
        (47, 46, 9), (47, 47, 7), (47, 48, 5), (47, 49, 3), (47, 0, 6),
        (48, 1, 4), (48, 2, 7), (48, 3, 5), (48, 4, 3), (48, 5, 2),
        (49, 6, 6), (49, 7, 5), (49, 8, 4), (49, 9, 3), (49, 10, 7)
    ]

    for from_vertex, to_vertex, weight in edges:
        g.add_edge(from_vertex, to_vertex, weight)



-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    g = OrientedGraph(1000)

    # Adiciona dados aos vértices
    for i in range(1000):
        g.add_vertex_data(i, f'v{i+1}')

    # Adiciona arestas densamente conectadas
    for i in range(1000):
        for j in range(1000):
            if i != j:
                weight = random.randint(1, 20)
                g.add_edge(i, j, weight)



// Grafos Eulerianos

    grafo = {
        1: [2, 3, 4, 5],
        2: [1, 6, 7, 8],
        3: [1, 9, 10, 11],
        4: [1, 12, 13, 14],
        5: [1, 15, 16, 17],
        6: [2, 18, 19, 20],
        7: [2, 21, 22, 23],
        8: [2, 24, 25, 26],
        9: [3, 27, 28, 29],
        10: [3, 30, 31, 32],
        11: [3, 33, 34, 35],
        12: [4, 36, 37, 38],
        13: [4, 39, 40, 41],
        14: [4, 42, 43, 44],
        15: [5, 45, 46, 47],
        16: [5, 48, 49, 50],
        17: [5, 51, 52, 53],
        18: [6, 21, 24, 27],
        19: [6, 22, 25, 28],
        20: [6, 23, 26, 29],
        21: [7, 18, 24, 30],
        22: [7, 19, 25, 31],
        23: [7, 20, 26, 32],
        24: [8, 18, 21, 33],
        25: [8, 19, 22, 34],
        26: [8, 20, 23, 35],
        27: [9, 18, 30, 33],
        28: [9, 19, 31, 34],
        29: [9, 20, 32, 35],
        30: [10, 21, 27, 36],
        31: [10, 22, 28, 37],
        32: [10, 23, 29, 38],
        33: [11, 24, 27, 39],
        34: [11, 25, 28, 40],
        35: [11, 26, 29, 41],
        36: [12, 30, 42, 45],
        37: [12, 31, 43, 46],
        38: [12, 32, 44, 47],
        39: [13, 33, 42, 48],
        40: [13, 34, 43, 49],
        41: [13, 35, 44, 50],
        42: [14, 36, 39, 51],
        43: [14, 37, 40, 52],
        44: [14, 38, 41, 53],
        45: [15, 36, 51, 48],
        46: [15, 37, 52, 49],
        47: [15, 38, 53, 50],
        48: [16, 39, 45, 51],
        49: [16, 40, 46, 52],
        50: [16, 41, 47, 53],
        51: [17, 42, 45, 48],
        52: [17, 43, 46, 49],
        53: [17, 44, 47, 50]
    }

    grafo = {
        1: [2, 3, 4, 5],
        2: [1, 3, 6, 7],
        3: [1, 2, 8, 9],
        4: [1, 5, 10, 11],
        5: [1, 4, 12, 13],
        6: [2, 7, 14, 15],
        7: [2, 6, 16, 17],
        8: [3, 9, 18, 19],
        9: [3, 8, 20, 10],
        10: [4, 9, 11, 20],
        11: [4, 10, 12, 18],
        12: [5, 11, 13, 14],
        13: [5, 12, 15, 16],
        14: [6, 12, 15, 17],
        15: [6, 13, 14, 18],
        16: [7, 13, 17, 19],
        17: [7, 14, 16, 20],
        18: [8, 11, 15, 19],
        19: [8, 16, 18, 20],
        20: [9, 10, 17, 19]
    }


    grafo = {
        1: [2, 4],
        2: [1, 3, 4, 5],
        3: [2, 5],
        4: [1, 2, 5, 6],
        5: [2, 3, 4, 6],
        6: [4, 5]
    }



    # Número de vértices
    n = 1000

    # Certifique-se de que n é par, se não for, adicione um vértice extra
    if n % 2 != 0:
        n += 1

    # Lista de adjacência
    adj_list = {i: [] for i in range(n)}

    # Criar um grafo denso
    for i in range(n):
        for j in range(i + 1, n):
            adj_list[i].append(j)
            adj_list[j].append(i)

    # Verificar e ajustar para garantir que todos os vértices tenham grau par
    for vertex, neighbors in adj_list.items():
        if len(neighbors) % 2 != 0:
            # Encontrar outro vértice com grau ímpar para conectar
            for other_vertex in range(n):
                if other_vertex != vertex and len(adj_list[other_vertex]) % 2 != 0:
                    adj_list[vertex].append(other_vertex)
                    adj_list[other_vertex].append(vertex)
                    break

    # Imprimir a lista de adjacência
    for vertex, neighbors in adj_list.items():
        print(f"{vertex}: {neighbors}, ")